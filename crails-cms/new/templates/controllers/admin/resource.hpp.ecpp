#include <crails/utils/semantics.hpp>
#include <crails/cli/conventions.hpp>

std::string @resource_name;
std::string @local_route;
std::string classname = Crails::naming_convention.classnames("admin_" + resource_name + "_controller");
std::string @resource_traits = resource_name + "_traits";
std::string traits_classname = Crails::naming_convention.classnames(resource_traits);
std::string super = "Crails::Cms::Admin"
  + Crails::camelize(resource_name)
  + "Controller<" + traits_classname + ", "
  + Crails::naming_convention.classnames("AdminApplicationController")
  + '>';

// END LINKING
#pragma once
#include <crails/cms/controllers/admin/<%= resource_name %>.hpp>
#include "application.hpp"
#include "app/models/<%= Crails::naming_convention.filenames(resource_traits) %>.hpp"

class <%= classname %> : public <%= super %>
{
  typedef <%= super %> Super;
public:
  static constexpr const char* scope = "<%= local_route %>";

  <%= classname %>(Crails::Context& context) : Super(context)
  {
    vars["local_route"] = std::string(Super::scope) + '/' + scope;
  }
};
