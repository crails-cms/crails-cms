#include <crails/utils/semantics.hpp>
#include <crails/cli/conventions.hpp>

std::string @resource_name;
std::string classname = Crails::naming_convention.classnames(resource_name);
std::string group_classname = Crails::naming_convention.classnames("user_group");
// END LINKING
#pragma once
#include <crails/odb/helpers.hpp>
#include <crails/cms/models/<%= Crails::underscore(resource_name) %>.hpp>
#include "user_group.hpp"

#pragma db object
class <%= classname %> : public Crails::Cms::<%= Crails::camelize(resource_name) %>
{
  odb_instantiable()
public:
  #pragma db view object(<%= classname %>)
  struct Count
  {
    #pragma db column("count(" + <%= classname %>::id + ")")
    size_t value;
  };

  <%= classname %>() : permissions(groups)
  {
  }

  unsigned long get_group_flag() const override { return permissions.get_group_flag(); }
  Crails::Cms::UserPermissions<<%= group_classname %>> get_permissions() { return permissions; }
  std::vector<Crails::Odb::id_type> get_group_ids() const override { return collect_ids_from(groups); }

private:
  std::vector<std::shared_ptr<<%= group_classname %>>> groups;
  #pragma db transient
  Crails::Cms::UserPermissions<<%= group_classname %>> permissions;
};
